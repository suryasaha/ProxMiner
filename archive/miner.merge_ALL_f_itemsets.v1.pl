#!/usr/bin/perl -w
# MGEL
# Surya Saha 4/01/07
# reading 5 noise itemset files and real itemset generated by m.out2f_itemsets
# writing out the real itemsets along with the with 
# occurences = occurences - random occurences
# Conf = Conf - Random Conf
# NOTE: If noise>real occurences, then a 0 is recorded
# NOTE: If noise conf>real Conf, then a 0.00 is recorded

# OUTPUT:
# fam1, fam1-count, fam1-avglen, fam2, fam2-count, fam2-avglen, Occ, Occ conf, Avg Rand Coin, Avg Rand Coin conf, Diff, Diff conf, Strand, Category

use strict;
use warnings;
use POSIX;

# #fam1, fam1-count, fam1-avglen, fam2, fam2-count, fam2-avglen, Occurence, Strand, Category
# R=15	4	259	R=15	4	259	3	+	u1
#0	1	2	3	4	5	6	7	8

unless (@ARGV == 6){
	print "USAGE: $0 <input real f_itemsets file> <input noise f_itemsets file 1> <input noise f_itemsets file 2> <input noise f_itemsets file 3> <input noise f_itemsets file 4> <input noise f_itemsets file 5> \n";
	exit;
}


my ($ifname,$rec,@temp,@merged_table,@real_table,@noise_table,$conf,
%noise_hash_1,%noise_hash_2,%noise_hash_3,%noise_hash_4,%noise_hash_5, %temphash,@values,$ctr,$i,$j,$k,$user_t,$system_t,$cuser_t,$csystem_t,

$count_plus_u1,$total_plus_u1,$conf_plus_u1,$count_plus_u2,$total_plus_u2,$conf_plus_u2,$count_plus_u3,$total_plus_u3,$conf_plus_u3,$count_plus_u4,$total_plus_u4,$conf_plus_u4,$count_plus_u5,$total_plus_u5,$conf_plus_u5,
$count_plus_d1,$total_plus_d1,$conf_plus_d1,$count_plus_d2,$total_plus_d2,$conf_plus_d2,$count_plus_d3,$total_plus_d3,$conf_plus_d3,$count_plus_d4,$total_plus_d4,$conf_plus_d4,$count_plus_d5,$total_plus_d5,$conf_plus_d5,
$count_plus_IN,$total_plus_IN,$conf_plus_IN,
$count_plus_Ov1030,$total_plus_Ov1030,$conf_plus_Ov1030,$count_plus_Ov3070,$total_plus_Ov3070,$conf_plus_Ov3070,$count_plus_Ov70plus,$total_plus_Ov70plus,$conf_plus_Ov70plus,

$count_comp_u1,$total_comp_u1,$conf_comp_u1,$count_comp_u2,$total_comp_u2,$conf_comp_u2,$count_comp_u3,$total_comp_u3,$conf_comp_u3,$count_comp_u4,$total_comp_u4,$conf_comp_u4,$count_comp_u5,$total_comp_u5,$conf_comp_u5,
$count_comp_d1,$total_comp_d1,$conf_comp_d1,$count_comp_d2,$total_comp_d2,$conf_comp_d2,$count_comp_d3,$total_comp_d3,$conf_comp_d3,$count_comp_d4,$total_comp_d4,$conf_comp_d4,$count_comp_d5,$total_comp_d5,$conf_comp_d5,
$count_comp_IN,$total_comp_IN,$conf_comp_IN,
$count_comp_Ov1030,$total_comp_Ov1030,$conf_comp_Ov1030,$count_comp_Ov3070,$total_comp_Ov3070,$conf_comp_Ov3070,$count_comp_Ov70plus,$total_comp_Ov70plus,$conf_comp_Ov70plus,

$count_both_u1,$total_both_u1,$conf_both_u1,$count_both_u2,$total_both_u2,$conf_both_u2,$count_both_u3,$total_both_u3,$conf_both_u3,$count_both_u4,$total_both_u4,$conf_both_u4,$count_both_u5,$total_both_u5,$conf_both_u5,
$count_both_d1,$total_both_d1,$conf_both_d1,$count_both_d2,$total_both_d2,$conf_both_d2,$count_both_d3,$total_both_d3,$conf_both_d3,$count_both_d4,$total_both_d4,$conf_both_d4,$count_both_d5,$total_both_d5,$conf_both_d5,
$count_both_IN,$total_both_IN,$conf_both_IN,
$count_both_Ov1030,$total_both_Ov1030,$conf_both_Ov1030,$count_both_Ov3070,$total_both_Ov3070,$conf_both_Ov3070,$count_both_Ov70plus,$total_both_Ov70plus,$conf_both_Ov70plus,);

$ifname=$ARGV[0];
chomp $ifname;
unless(open(INFILEREALDATA,$ifname)){print "not able to open ".$ifname."\n\n";exit;}

$ifname=$ARGV[1];
chomp $ifname;
unless(open(INFILENOISEDATA_1,$ifname)){print "not able to open ".$ifname."\n\n";exit;}

$ifname=$ARGV[2];
chomp $ifname;
unless(open(INFILENOISEDATA_2,$ifname)){print "not able to open ".$ifname."\n\n";exit;}

$ifname=$ARGV[3];
chomp $ifname;
unless(open(INFILENOISEDATA_3,$ifname)){print "not able to open ".$ifname."\n\n";exit;}

$ifname=$ARGV[4];
chomp $ifname;
unless(open(INFILENOISEDATA_4,$ifname)){print "not able to open ".$ifname."\n\n";exit;}

$ifname=$ARGV[5];
chomp $ifname;
unless(open(INFILENOISEDATA_5,$ifname)){print "not able to open ".$ifname."\n\n";exit;}

$ifname=$ARGV[0];
chomp $ifname;
unless(open(OUTFILEDATA,">$ifname.merged.f_itemsets.tab")){print "not able to open ".$ifname."merged.f_itemsets.tab \n\n";exit;}

unless(open(OUTFILESTATS,">$ifname.merged.f_itemsets.stats.tab")){print "not able to open ".$ifname."merged.f_itemsets.stats.tab \n\n";exit;}

#slurping in the whole real itemset file
while($rec=<INFILEREALDATA>){
	if($rec =~ /#/){next;}
	if(length ($rec) < 10){next;}#for avoiding last line
	push @real_table, [split(' ',$rec)];
}

#slurping in the whole noise 1 itemset file
while($rec=<INFILENOISEDATA_1>){
	if($rec =~ /#/){next;}
	if(length ($rec) < 10){next;}#for avoiding last line
# 	print STDERR length ($rec),' ';
	push @noise_table, [split(' ',$rec)];
}

# #fam1, fam1-count, fam1-avglen, fam2, fam2-count, fam2-avglen, Occurence, Strand, Category
# R=15	4	259	R=15	4	259	3	+	u1
#0	1	2	3	4	5	6	7	8

# put the noise data into a hash
foreach (@noise_table){
	#key is fam1.fam2.category
	#value is the occurence by chance (noise)
# 	if (!exists $_->[0]){ print "\n 0 not defined";}
# 	if (!exists $_->[3]){ print "\n 3 not defined";}
# 	if (!exists $_->[6]){ print "\n 6 not defined, : $_->[0] $_->[1] $_->[2] $_->[3] $_->[4] $_->[5]";}
# 	if (!exists $_->[7]){ print "\n 7 not defined";} 
	
	$noise_hash_1{"$_->[0] $_->[3] $_->[7] $_->[8]"} = "$_->[6]";
}


# reinitializing the array
undef @noise_table;

#slurping in the whole noise 2 itemset file
while($rec=<INFILENOISEDATA_2>){
	if($rec =~ /#/){next;}
	if(length ($rec) < 10){next;}#for avoiding last line
# 	print STDERR length ($rec),' ';
	push @noise_table, [split(' ',$rec)];
}

# put the noise data into a hash
foreach (@noise_table){
	$noise_hash_2{"$_->[0] $_->[3] $_->[7] $_->[8]"} = "$_->[6]";
}

# reinitializing the array
undef @noise_table;

#slurping in the whole noise 3 itemset file
while($rec=<INFILENOISEDATA_3>){
	if($rec =~ /#/){next;}
	if(length ($rec) < 10){next;}#for avoiding last line
# 	print STDERR length ($rec),' ';
	push @noise_table, [split(' ',$rec)];
}

# put the noise data into a hash
foreach (@noise_table){
	$noise_hash_3{"$_->[0] $_->[3] $_->[7] $_->[8]"} = "$_->[6]";
}

# reinitializing the array
undef @noise_table;

#slurping in the whole noise 4 itemset file
while($rec=<INFILENOISEDATA_4>){
	if($rec =~ /#/){next;}
	if(length ($rec) < 10){next;}#for avoiding last line
# 	print STDERR length ($rec),' ';
	push @noise_table, [split(' ',$rec)];
}

# put the noise data into a hash
foreach (@noise_table){
	$noise_hash_4{"$_->[0] $_->[3] $_->[7] $_->[8]"} = "$_->[6]";
}

# reinitializing the array
undef @noise_table;

#slurping in the whole noise 5 itemset file
while($rec=<INFILENOISEDATA_5>){
	if($rec =~ /#/){next;}
	if(length ($rec) < 10){next;}#for avoiding last line
# 	print STDERR length ($rec),' ';
	push @noise_table, [split(' ',$rec)];
}

# put the noise data into a hash
foreach (@noise_table){
	$noise_hash_5{"$_->[0] $_->[3] $_->[7] $_->[8]"} = "$_->[6]";
}

close (INFILEREALDATA);
close (INFILENOISEDATA_1);
close (INFILENOISEDATA_2);
close (INFILENOISEDATA_3);
close (INFILENOISEDATA_4);
close (INFILENOISEDATA_5);

# initializing variables for statistics
$count_plus_u1=$total_plus_u1=$conf_plus_u1=$count_plus_u2=$total_plus_u2=$conf_plus_u2=$count_plus_u3=$total_plus_u3=$conf_plus_u3=$count_plus_u4=$total_plus_u4=$conf_plus_u4=$count_plus_u5=$total_plus_u5=$conf_plus_u5=$count_plus_d1=$total_plus_d1=$conf_plus_d1=$count_plus_d2=$total_plus_d2=$conf_plus_d2=$count_plus_d3=$total_plus_d3=$conf_plus_d3=$count_plus_d4=$total_plus_d4=$conf_plus_d4=$count_plus_d5=$total_plus_d5=$conf_plus_d5=$count_plus_IN=$total_plus_IN=$conf_plus_IN=$count_plus_Ov1030=$total_plus_Ov1030=$conf_plus_Ov1030=$count_plus_Ov3070=$total_plus_Ov3070=$conf_plus_Ov3070=$count_plus_Ov70plus=$total_plus_Ov70plus=$conf_plus_Ov70plus=0;

$count_comp_u1=$total_comp_u1=$conf_comp_u1=$count_comp_u2=$total_comp_u2=$conf_comp_u2=$count_comp_u3=$total_comp_u3=$conf_comp_u3=$count_comp_u4=$total_comp_u4=$conf_comp_u4=$count_comp_u5=$total_comp_u5=$conf_comp_u5=$count_comp_d1=$total_comp_d1=$conf_comp_d1=$count_comp_d2=$total_comp_d2=$conf_comp_d2=$count_comp_d3=$total_comp_d3=$conf_comp_d3=$count_comp_d4=$total_comp_d4=$conf_comp_d4=$count_comp_d5=$total_comp_d5=$conf_comp_d5=$count_comp_IN=$total_comp_IN=$conf_comp_IN=$count_comp_Ov1030=$total_comp_Ov1030=$conf_comp_Ov1030=$count_comp_Ov3070=$total_comp_Ov3070=$conf_comp_Ov3070=$count_comp_Ov70plus=$total_comp_Ov70plus=$conf_comp_Ov70plus=0;

$count_both_u1=$total_both_u1=$conf_both_u1=$count_both_u2=$total_both_u2=$conf_both_u2=$count_both_u3=$total_both_u3=$conf_both_u3=$count_both_u4=$total_both_u4=$conf_both_u4=$count_both_u5=$total_both_u5=$conf_both_u5=$count_both_d1=$total_both_d1=$conf_both_d1=$count_both_d2=$total_both_d2=$conf_both_d2=$count_both_d3=$total_both_d3=$conf_both_d3=$count_both_d4=$total_both_d4=$conf_both_d4=$count_both_d5=$total_both_d5=$conf_both_d5=$count_both_IN=$total_both_IN=$conf_both_IN=$count_both_Ov1030=$total_both_Ov1030=$conf_both_Ov1030=$count_both_Ov3070=$total_both_Ov3070=$conf_both_Ov3070=$count_both_Ov70plus=$total_both_Ov70plus=$conf_both_Ov70plus=0;

#filling up the @merged_table array the merged file
# @real_table
# #fam1, fam1-count, fam1-avglen, fam2, fam2-count, fam2-avglen, Occurence, Strand, Category
# R=15	4	259	R=15	4	259	3	+	u1
#0	1	2	3	4	5	6	7	8

# @merged_table:fam1, fam1-count, fam1-avglen, fam2, fam2-count, fam2-avglen, Occurence, Occurence conf., Avg. Rand Coin., Avg. Rand Coin. conf., Diff, Diff conf., Strand, Category

$ctr=0;
foreach $i (@real_table){
	
	$merged_table[$ctr][0] = $i->[0];# fam1
	$merged_table[$ctr][1] = $i->[1];# fam1-count
	$merged_table[$ctr][2] = $i->[2];# fam1-avg len
	$merged_table[$ctr][3] = $i->[3];# fam2
	$merged_table[$ctr][4] = $i->[4];# fam2-count
	$merged_table[$ctr][5] = $i->[5];# fam2-avg len
	$merged_table[$ctr][6] = $i->[6];# Occurence count
	
	# calculating occ. conf
	if($i->[1] > $i->[4]){
		$conf=$i->[6]/$i->[4];
	}
	elsif($i->[4] > $i->[1]){
		$conf=$i->[6]/$i->[1];
	}
	else{#both are equal, same family relation??
		$conf=$i->[6]/$i->[1];
	}
	#chop off to 2 decimal places
	$conf=$conf*100;
	$conf=int($conf);
	$conf=$conf/100;
	$merged_table[$ctr][7] = $conf;# Occ conf
	
	
	# Avg Rand Coin. count
	#get the noise data
	$j=$k=0;
	#check if the relation even exists in noise 1
	if (exists $noise_hash_1{"$i->[0] $i->[3] $i->[7] $i->[8]"}){
		$j = $noise_hash_1{"$i->[0] $i->[3] $i->[7] $i->[8]"};
		$k++;
	}

	#check if the relation even exists in noise 2
	if (exists $noise_hash_2{"$i->[0] $i->[3] $i->[7] $i->[8]"}){
		$j += $noise_hash_2{"$i->[0] $i->[3] $i->[7] $i->[8]"};
		$k++;
	}

	#check if the relation even exists in noise 3
	if (exists $noise_hash_3{"$i->[0] $i->[3] $i->[7] $i->[8]"}){
		$j += $noise_hash_3{"$i->[0] $i->[3] $i->[7] $i->[8]"};
		$k++;
	}

	#check if the relation even exists in noise 4
	if (exists $noise_hash_4{"$i->[0] $i->[3] $i->[7] $i->[8]"}){
		$j += $noise_hash_4{"$i->[0] $i->[3] $i->[7] $i->[8]"};
		$k++;
	}

	#check if the relation even exists in noise 5
	if (exists $noise_hash_1{"$i->[0] $i->[3] $i->[7] $i->[8]"}){
		$j += $noise_hash_1{"$i->[0] $i->[3] $i->[7] $i->[8]"};
		$k++;
	}
	# Avg Rand Coin. count
	$merged_table[$ctr][8] = ceil($j/$k);

	# calculating Avg Rand Coin. conf
	if($i->[1] > $i->[4]){
		$conf=$merged_table[$ctr][8]/$i->[4];
	}
	elsif($i->[4] > $i->[1]){
		$conf=$merged_table[$ctr][8]/$i->[1];
	}
	else{#both are equal, same family relation??
		$conf=$merged_table[$ctr][8]/$i->[1];
	}
	#chop off to 2 decimal places
	$conf=$conf*100;
	$conf=int($conf);
	$conf=$conf/100;
	$merged_table[$ctr][9] = $conf;# Avg Rand Coin. conf
	
	#Diff
	#in order to store only >= 0 values
	if($i->[6] - $merged_table[$ctr][8] > -1) {
		$merged_table[$ctr][10] = $i->[6] - $merged_table[$ctr][8];
	}
	else{
		$merged_table[$ctr][10] = 0;
	}

	# calculating Diff. conf
	if ($merged_table[$ctr][10] > 0){# to avoid divide by 0
		if($i->[1] > $i->[4]){
			$conf=$merged_table[$ctr][10]/$i->[4];
		}
		elsif($i->[4] > $i->[1]){
			$conf=$merged_table[$ctr][10]/$i->[1];
		}
		else{#both are equal, same family relation??
			$conf=$merged_table[$ctr][10]/$i->[1];
		}
		#chop off to 2 decimal places
		$conf=$conf*100;
		$conf=int($conf);
		$conf=$conf/100;
		$merged_table[$ctr][11] = $conf;# Diff. conf
	}
	else{
		$merged_table[$ctr][11] = 0.00;# Diff. conf
	}
	
	$merged_table[$ctr][12] = $i->[7];# Strand
	$merged_table[$ctr][13] = $i->[8];# Category
	
	# get info for statistics
	if ($merged_table[$ctr][12] eq '+'){
		if($merged_table[$ctr][13] eq "u1"){
			$count_plus_u1++;
			$total_plus_u1+=$merged_table[$ctr][10];
			$conf_plus_u1+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u2"){
			$count_plus_u2++;
			$total_plus_u2+=$merged_table[$ctr][10];
			$conf_plus_u2+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u3"){
			$count_plus_u3++;
			$total_plus_u3+=$merged_table[$ctr][10];
			$conf_plus_u3+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u4"){
			$count_plus_u4++;
			$total_plus_u4+=$merged_table[$ctr][10];
			$conf_plus_u4+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u5"){
			$count_plus_u5++;
			$total_plus_u5+=$merged_table[$ctr][10];
			$conf_plus_u5+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d1"){
			$count_plus_d1++;
			$total_plus_d1+=$merged_table[$ctr][10];
			$conf_plus_d1+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d2"){
			$count_plus_d2++;
			$total_plus_d2+=$merged_table[$ctr][10];
			$conf_plus_d2+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d3"){
			$count_plus_d3++;
			$total_plus_d3+=$merged_table[$ctr][10];
			$conf_plus_d3+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d4"){
			$count_plus_d4++;
			$total_plus_d4+=$merged_table[$ctr][10];
			$conf_plus_d4+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d5"){
			$count_plus_d5++;
			$total_plus_d5+=$merged_table[$ctr][10];
			$conf_plus_d5+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "IN"){
			$count_plus_IN++;
			$total_plus_IN+=$merged_table[$ctr][10];
			$conf_plus_IN+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "Ovlap-10to30"){
			$count_plus_Ov1030++;
			$total_plus_Ov1030+=$merged_table[$ctr][10];
			$conf_plus_Ov1030+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "Ovlap-30to70"){
			$count_plus_Ov3070++;
			$total_plus_Ov3070+=$merged_table[$ctr][10];
			$conf_plus_Ov3070+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "Ovlap-70plus"){
			$count_plus_Ov70plus++;
			$total_plus_Ov70plus+=$merged_table[$ctr][10];
			$conf_plus_Ov70plus+=$merged_table[$ctr][11];
		}
	}
	elsif ($merged_table[$ctr][12] eq 'C'){
		if($merged_table[$ctr][13] eq "u1"){
			$count_comp_u1++;
			$total_comp_u1+=$merged_table[$ctr][10];
			$conf_comp_u1+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u2"){
			$count_comp_u2++;
			$total_comp_u2+=$merged_table[$ctr][10];
			$conf_comp_u2+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u3"){
			$count_comp_u3++;
			$total_comp_u3+=$merged_table[$ctr][10];
			$conf_comp_u3+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u4"){
			$count_comp_u4++;
			$total_comp_u4+=$merged_table[$ctr][10];
			$conf_comp_u4+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u5"){
			$count_comp_u5++;
			$total_comp_u5+=$merged_table[$ctr][10];
			$conf_comp_u5+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d1"){
			$count_comp_d1++;
			$total_comp_d1+=$merged_table[$ctr][10];
			$conf_comp_d1+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d2"){
			$count_comp_d2++;
			$total_comp_d2+=$merged_table[$ctr][10];
			$conf_comp_d2+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d3"){
			$count_comp_d3++;
			$total_comp_d3+=$merged_table[$ctr][10];
			$conf_comp_d3+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d4"){
			$count_comp_d4++;
			$total_comp_d4+=$merged_table[$ctr][10];
			$conf_comp_d4+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d5"){
			$count_comp_d5++;
			$total_comp_d5+=$merged_table[$ctr][10];
			$conf_comp_d5+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "IN"){
			$count_comp_IN++;
			$total_comp_IN+=$merged_table[$ctr][10];
			$conf_comp_IN+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "Ovlap-10to30"){
			$count_comp_Ov1030++;
			$total_comp_Ov1030+=$merged_table[$ctr][10];
			$conf_comp_Ov1030+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "Ovlap-30to70"){
			$count_comp_Ov3070++;
			$total_comp_Ov3070+=$merged_table[$ctr][10];
			$conf_comp_Ov3070+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "Ovlap-70plus"){
			$count_comp_Ov70plus++;
			$total_comp_Ov70plus+=$merged_table[$ctr][10];
			$conf_comp_Ov70plus+=$merged_table[$ctr][11];
		}
	}
	elsif ($merged_table[$ctr][12] eq 'B'){
		if($merged_table[$ctr][13] eq "u1"){
			$count_both_u1++;
			$total_both_u1+=$merged_table[$ctr][10];
			$conf_both_u1+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u2"){
			$count_both_u2++;
			$total_both_u2+=$merged_table[$ctr][10];
			$conf_both_u2+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u3"){
			$count_both_u3++;
			$total_both_u3+=$merged_table[$ctr][10];
			$conf_both_u3+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u4"){
			$count_both_u4++;
			$total_both_u4+=$merged_table[$ctr][10];
			$conf_both_u4+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "u5"){
			$count_both_u5++;
			$total_both_u5+=$merged_table[$ctr][10];
			$conf_both_u5+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d1"){
			$count_both_d1++;
			$total_both_d1+=$merged_table[$ctr][10];
			$conf_both_d1+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d2"){
			$count_both_d2++;
			$total_both_d2+=$merged_table[$ctr][10];
			$conf_both_d2+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d3"){
			$count_both_d3++;
			$total_both_d3+=$merged_table[$ctr][10];
			$conf_both_d3+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d4"){
			$count_both_d4++;
			$total_both_d4+=$merged_table[$ctr][10];
			$conf_both_d4+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "d5"){
			$count_both_d5++;
			$total_both_d5+=$merged_table[$ctr][10];
			$conf_both_d5+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "IN"){
			$count_both_IN++;
			$total_both_IN+=$merged_table[$ctr][10];
			$conf_both_IN+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "Ovlap-10to30"){
			$count_both_Ov1030++;
			$total_both_Ov1030+=$merged_table[$ctr][10];
			$conf_both_Ov1030+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "Ovlap-30to70"){
			$count_both_Ov3070++;
			$total_both_Ov3070+=$merged_table[$ctr][10];
			$conf_both_Ov3070+=$merged_table[$ctr][11];
		}
		elsif($merged_table[$ctr][13] eq "Ovlap-70plus"){
			$count_both_Ov70plus++;
			$total_both_Ov70plus+=$merged_table[$ctr][10];
			$conf_both_Ov70plus+=$merged_table[$ctr][11];
		}
	}
	
	$ctr++; # increment for next record
}


#sort @merged_table on strand, difference conf, difference
# @merged_table:fam1, fam1-count, fam1-avglen, fam2, fam2-count, fam2-avglen, Occurence, Occurence conf., Avg. Rand Coin., Avg. Rand Coin. conf., Diff, Diff conf., Strand, Category
@temp = sort {($a->[12] cmp $b->[12]) or ($b->[11] <=> $a->[11]) or ($b->[10] <=> $a->[10])} @merged_table;
@merged_table=@temp;


print OUTFILEDATA "\#Version: 1.0\n";

$i=localtime();
#print data to file
print OUTFILEDATA "\#Time: $i\n";
print OUTFILEDATA "\n\#Output sorted on strand, difference conf, difference";
print OUTFILEDATA "\#fam1, fam1-count, fam1-avglen, fam2, fam2-count, fam2-avglen, Occ, Occ conf, Avg Rand Coin, Avg Rand Coin conf, Diff, Diff conf, Strand, Category\n";
foreach $i (@merged_table){
	print OUTFILEDATA "$i->[0]\t$i->[1]\t$i->[2]\t$i->[3]\t$i->[4]\t$i->[5]\t$i->[6]\t";
	print OUTFILEDATA "$i->[7]\t$i->[8]\t$i->[9]\t$i->[10]\t$i->[11]\t$i->[12]\n";
}

# calculating time taken
($user_t,$system_t,$cuser_t,$csystem_t) = times;
print OUTFILEDATA "\n\# Runtime details after printing the pruned itemsets: \n";
print OUTFILEDATA "\# System time for process: $system_t\n";
#print OUTFILEDATA "\# System time for children: $csystem_t\n";
print OUTFILEDATA "\# User time for process: $user_t\n";
#print OUTFILEDATA "\# User time for children: $cuser_t\n";




#print stats to file
print OUTFILESTATS "\#Version: 1.0\n";
print OUTFILESTATS "Time: $i\n";
print OUTFILESTATS "\nStatistics for + strand\n";
print OUTFILESTATS "Relationship type: u1 (0-500bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_u1."\n";
if ($count_plus_u1 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_u1/$count_plus_u1)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_u1/$count_plus_u1)."\n";
}
print OUTFILESTATS "Relationship type: u2 (500-1000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_u2."\n";
if ($count_plus_u2 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_u2/$count_plus_u2)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_u2/$count_plus_u2)."\n";
}
print OUTFILESTATS "Relationship type: u3 (1000-5000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_u3."\n";
if ($count_plus_u3 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_u3/$count_plus_u3)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_u3/$count_plus_u3)."\n";
}
print OUTFILESTATS "Relationship type: u4 (5000-10000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_u4."\n";
if ($count_plus_u4 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_u4/$count_plus_u4)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_u4/$count_plus_u4)."\n";
}
print OUTFILESTATS "Relationship type: u5 (10000-15000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_u5."\n";
if ($count_plus_u5 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_u5/$count_plus_u5)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_u5/$count_plus_u5)."\n";
}

print OUTFILESTATS "Relationship type: d1 (0-500bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_d1."\n";
if ($count_plus_d1 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_d1/$count_plus_d1)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_d1/$count_plus_d1)."\n";
}
print OUTFILESTATS "Relationship type: d2 (500-1000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_d2."\n";
if ($count_plus_d2 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_d2/$count_plus_d2)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_d2/$count_plus_d2)."\n";
}
print OUTFILESTATS "Relationship type: d3 (1000-5000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_d3."\n";
if ($count_plus_d3 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_d3/$count_plus_d3)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_d3/$count_plus_d3)."\n";
}
print OUTFILESTATS "Relationship type: d4 (5000-10000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_d4."\n";
if ($count_plus_d4 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_d4/$count_plus_d4)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_d4/$count_plus_d4)."\n";
}
print OUTFILESTATS "Relationship type: d5 (10000-15000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_d5."\n";
if ($count_plus_d5 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_d5/$count_plus_d5)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_d5/$count_plus_d5)."\n";
}
print OUTFILESTATS "Relationship type: Within\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_IN."\n";
if ($count_plus_IN > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_IN/$count_plus_IN)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_IN/$count_plus_IN)."\n";
}
print OUTFILESTATS "Relationship type: Overlap (10 to 30%)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_Ov1030."\n";
if ($count_plus_Ov1030 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_Ov1030/$count_plus_Ov1030)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_Ov1030/$count_plus_Ov1030)."\n";
}
print OUTFILESTATS "Relationship type: Overlap (30 to 70%)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_Ov3070."\n";
if ($count_plus_Ov3070 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_Ov3070/$count_plus_Ov3070)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_Ov3070/$count_plus_Ov3070)."\n";
}
print OUTFILESTATS "Relationship type: Overlap (70% or more)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_plus_Ov70plus."\n";
if ($count_plus_Ov70plus > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_plus_Ov70plus/$count_plus_Ov70plus)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_plus_Ov70plus/$count_plus_Ov70plus)."\n";
}

print OUTFILESTATS "\n\n\n***********************************************************************\n\n\n";

print OUTFILESTATS "Statistics for comp strand\n";
print OUTFILESTATS "Relationship type: u1 (0-500bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_u1."\n";
if ($count_comp_u1 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_u1/$count_comp_u1)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_u1/$count_comp_u1)."\n";
}
print OUTFILESTATS "Relationship type: u2 (500-1000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_u2."\n";
if ($count_comp_u2 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_u2/$count_comp_u2)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_u2/$count_comp_u2)."\n";
}
print OUTFILESTATS "Relationship type: u3 (1000-5000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_u3."\n";
if ($count_comp_u3 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_u3/$count_comp_u3)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_u3/$count_comp_u3)."\n";
}
print OUTFILESTATS "Relationship type: u4 (5000-10000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_u4."\n";
if ($count_comp_u4 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_u4/$count_comp_u4)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_u4/$count_comp_u4)."\n";
}
print OUTFILESTATS "Relationship type: u5 (10000-15000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_u5."\n";
if ($count_comp_u5 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_u5/$count_comp_u5)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_u5/$count_comp_u5)."\n";
}

print OUTFILESTATS "Relationship type: d1 (0-500bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_d1."\n";
if ($count_comp_d1 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_d1/$count_comp_d1)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_d1/$count_comp_d1)."\n";
}
print OUTFILESTATS "Relationship type: d2 (500-1000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_d2."\n";
if ($count_comp_d2 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_d2/$count_comp_d2)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_d2/$count_comp_d2)."\n";
}
print OUTFILESTATS "Relationship type: d3 (1000-5000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_d3."\n";
if ($count_comp_d3 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_d3/$count_comp_d3)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_d3/$count_comp_d3)."\n";
}
print OUTFILESTATS "Relationship type: d4 (5000-10000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_d4."\n";
if ($count_comp_d4 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_d4/$count_comp_d4)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_d4/$count_comp_d4)."\n";
}
print OUTFILESTATS "Relationship type: d5 (10000-15000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_d5."\n";
if ($count_comp_d5 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_d5/$count_comp_d5)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_d5/$count_comp_d5)."\n";
}
print OUTFILESTATS "Relationship type: Within\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_IN."\n";
if ($count_comp_IN > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_IN/$count_comp_IN)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_IN/$count_comp_IN)."\n";
}
print OUTFILESTATS "Relationship type: Overlap (10 to 30%)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_Ov1030."\n";
if ($count_comp_Ov1030 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_Ov1030/$count_comp_Ov1030)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_Ov1030/$count_comp_Ov1030)."\n";
}
print OUTFILESTATS "Relationship type: Overlap (30 to 70%)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_Ov3070."\n";
if ($count_comp_Ov3070 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_Ov3070/$count_comp_Ov3070)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_Ov3070/$count_comp_Ov3070)."\n";
}
print OUTFILESTATS "Relationship type: Overlap (70% or more)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_comp_Ov70plus."\n";
if ($count_comp_Ov70plus > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_comp_Ov70plus/$count_comp_Ov70plus)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_comp_Ov70plus/$count_comp_Ov70plus)."\n";
}



print OUTFILESTATS "\n\n\n***********************************************************************\n\n\n";

print OUTFILESTATS "Statistics for both strands\n";
print OUTFILESTATS "Relationship type: u1 (0-500bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_u1."\n";
if ($count_both_u1 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_u1/$count_both_u1)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_u1/$count_both_u1)."\n";
}
print OUTFILESTATS "Relationship type: u2 (500-1000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_u2."\n";
if ($count_both_u2 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_u2/$count_both_u2)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_u2/$count_both_u2)."\n";
}
print OUTFILESTATS "Relationship type: u3 (1000-5000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_u3."\n";
if ($count_both_u3 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_u3/$count_both_u3)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_u3/$count_both_u3)."\n";
}
print OUTFILESTATS "Relationship type: u4 (5000-10000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_u4."\n";
if ($count_both_u4 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_u4/$count_both_u4)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_u4/$count_both_u4)."\n";
}
print OUTFILESTATS "Relationship type: u5 (10000-15000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_u5."\n";
if ($count_both_u5 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_u5/$count_both_u5)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_u5/$count_both_u5)."\n";
}

print OUTFILESTATS "Relationship type: d1 (0-500bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_d1."\n";
if ($count_both_d1 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_d1/$count_both_d1)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_d1/$count_both_d1)."\n";
}
print OUTFILESTATS "Relationship type: d2 (500-1000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_d2."\n";
if ($count_both_d2 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_d2/$count_both_d2)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_d2/$count_both_d2)."\n";
}
print OUTFILESTATS "Relationship type: d3 (1000-5000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_d3."\n";
if ($count_both_d3 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_d3/$count_both_d3)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_d3/$count_both_d3)."\n";
}
print OUTFILESTATS "Relationship type: d4 (5000-10000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_d4."\n";
if ($count_both_d4 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_d4/$count_both_d4)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_d4/$count_both_d4)."\n";
}
print OUTFILESTATS "Relationship type: d5 (10000-15000bp)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_d5."\n";
if ($count_both_d5 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_d5/$count_both_d5)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_d5/$count_both_d5)."\n";
}
print OUTFILESTATS "Relationship type: Within\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_IN."\n";
if ($count_both_IN > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_IN/$count_both_IN)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_IN/$count_both_IN)."\n";
}
print OUTFILESTATS "Relationship type: Overlap (10 to 30%)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_Ov1030."\n";
if ($count_both_Ov1030 > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_Ov1030/$count_both_Ov1030)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_Ov1030/$count_both_Ov1030)."\n";
}
print OUTFILESTATS "Relationship type: Overlap (30 to 70%)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_Ov3070."\n";
if ($count_both_Ov70plus > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_Ov3070/$count_both_Ov3070)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_Ov3070/$count_both_Ov3070)."\n";
}
print OUTFILESTATS "Relationship type: Overlap (70% or more)\n";
print OUTFILESTATS "Number of family pairs:\t".$count_both_Ov70plus."\n";
if ($count_both_Ov70plus > 0){
	print OUTFILESTATS "Average count:\t".ceil($total_both_Ov70plus/$count_both_Ov70plus)."\n";
	print OUTFILESTATS "Average confidence :\t".ceil($total_both_Ov70plus/$count_both_Ov70plus)."\n";
}


# calculating time taken
($user_t,$system_t,$cuser_t,$csystem_t) = times;
print OUTFILESTATS "\n\# Runtime details after printing the pruned itemsets: \n";
print OUTFILESTATS "\# System time for process: $system_t\n";
#print OUTFILEDATA "\# System time for children: $csystem_t\n";
print OUTFILESTATS "\# User time for process: $user_t\n";
#print OUTFILEDATA "\# User time for children: $cuser_t\n";



print "\# Runtime details : \n";
print "\# System time for process: $system_t\n";
print "\# User time for process: $user_t\n";


close (OUTFILEDATA);
close (OUTFILESTATS);

exit;
